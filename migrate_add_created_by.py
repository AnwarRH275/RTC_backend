#!/usr/bin/env python3
"""
Script de migration pour ajouter le champ 'created_by' √† la table User
√Ä ex√©cuter une seule fois apr√®s le d√©ploiement des nouvelles fonctionnalit√©s mod√©rateur
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models.model import User
from sqlalchemy import text

def migrate_add_created_by_field():
    """Ajoute le champ created_by √† la table User si il n'existe pas d√©j√†"""
    
    with app.app_context():
        try:
            # V√©rifier si la colonne existe d√©j√†
            result = db.engine.execute(text(
                "PRAGMA table_info(user);"
            ))
            
            columns = [row[1] for row in result]
            
            if 'created_by' not in columns:
                print("Ajout de la colonne 'created_by' √† la table User...")
                
                # Ajouter la colonne created_by
                db.engine.execute(text(
                    "ALTER TABLE user ADD COLUMN created_by VARCHAR(80);"
                ))
                
                print("‚úÖ Colonne 'created_by' ajout√©e avec succ√®s!")
                
                # Optionnel: Mettre √† jour les utilisateurs existants
                # Tous les utilisateurs existants n'ont pas √©t√© cr√©√©s par un mod√©rateur
                # donc on laisse created_by √† NULL
                
                print("Migration termin√©e avec succ√®s!")
            else:
                print("‚úÖ La colonne 'created_by' existe d√©j√† dans la table User.")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la migration: {str(e)}")
            db.session.rollback()
            return False
            
    return True

def verify_migration():
    """V√©rifie que la migration s'est bien d√©roul√©e"""
    
    with app.app_context():
        try:
            # Tester la cr√©ation d'un utilisateur avec created_by
            test_user = User(
                username='test_migration_user',
                email='test@migration.com',
                password='test_password',
                created_by='test_moderator'
            )
            
            # Ne pas sauvegarder, juste v√©rifier que l'objet peut √™tre cr√©√©
            user_dict = test_user.to_dict()
            
            if 'created_by' in user_dict:
                print("‚úÖ V√©rification r√©ussie: Le champ 'created_by' est fonctionnel.")
                return True
            else:
                print("‚ùå Erreur: Le champ 'created_by' n'appara√Æt pas dans to_dict().")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification: {str(e)}")
            return False

if __name__ == '__main__':
    print("=== Migration: Ajout du champ 'created_by' ===")
    print("Cette migration ajoute le champ 'created_by' √† la table User")
    print("pour permettre le suivi des utilisateurs cr√©√©s par les mod√©rateurs.\n")
    
    # Ex√©cuter la migration
    if migrate_add_created_by_field():
        print("\n=== V√©rification de la migration ===")
        if verify_migration():
            print("\nüéâ Migration compl√®te et v√©rifi√©e avec succ√®s!")
            print("\nLes mod√©rateurs peuvent maintenant:")
            print("- Cr√©er des comptes utilisateurs (r√¥le 'client' uniquement)")
            print("- G√©rer uniquement les comptes qu'ils ont cr√©√©s")
            print("- Acc√©der uniquement aux sections 'Gestion de compte' et 'Profil'")
        else:
            print("\n‚ö†Ô∏è  Migration effectu√©e mais la v√©rification a √©chou√©.")
            print("Veuillez v√©rifier manuellement la base de donn√©es.")
    else:
        print("\n‚ùå √âchec de la migration. Veuillez v√©rifier les erreurs ci-dessus.")
        sys.exit(1)