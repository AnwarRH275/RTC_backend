#!/bin/bash
set -e

echo "=== D√©marrage du conteneur Ubuntu avec migration automatique ==="
echo "Timestamp: $(date)"

# Fonction pour v√©rifier la disponibilit√© de la base de donn√©es
check_database() {
    echo "V√©rification de la disponibilit√© de la base de donn√©es..."
    
    python3 -c "
import time
import sys
import os
from sqlalchemy import create_engine
from sqlalchemy.exc import OperationalError

database_url = os.getenv('DATABASE_URL')
if not database_url:
    print('ERREUR: DATABASE_URL non d√©finie')
    sys.exit(1)

print(f'Connexion √†: {database_url}')
engine = create_engine(database_url)
max_retries = 30
retry_count = 0

while retry_count < max_retries:
    try:
        with engine.connect() as conn:
            conn.execute('SELECT 1')
        print('‚úì Base de donn√©es disponible!')
        break
    except OperationalError as e:
        retry_count += 1
        print(f'Tentative {retry_count}/{max_retries} - Base de donn√©es non disponible: {e}')
        time.sleep(2)
else:
    print('ERREUR: Impossible de se connecter √† la base de donn√©es apr√®s 30 tentatives')
    sys.exit(1)
"
}

# Fonction pour initialiser les tables
init_tables() {
    echo "Initialisation des tables..."
    python3 init_db.py
    if [ $? -eq 0 ]; then
        echo "‚úì Tables initialis√©es avec succ√®s"
    else
        echo "‚úó Erreur lors de l'initialisation des tables"
        exit 1
    fi
}

# Fonction pour v√©rifier si la migration est n√©cessaire
check_migration_needed() {
    echo "V√©rification de la n√©cessit√© de migration..."
    
    python3 -c "
from app import app
from models.exts import db
from models.model import User

with app.app_context():
    try:
        user_count = User.query.count()
        print(f'Nombre d\'utilisateurs existants: {user_count}')
        if user_count == 0:
            print('MIGRATION_NEEDED')
        else:
            print('MIGRATION_NOT_NEEDED')
    except Exception as e:
        print(f'Erreur lors de la v√©rification: {e}')
        print('MIGRATION_NEEDED')
"
}

# Fonction pour effectuer la migration
perform_migration() {
    echo "üîÑ Migration des donn√©es depuis dev.db vers MariaDB..."
    
    # V√©rifier que dev.db existe
    if [ ! -f "dev.db" ]; then
        echo "‚úó ERREUR: Fichier dev.db non trouv√©!"
        exit 1
    fi
    
    echo "üìÅ Fichier dev.db trouv√© ($(du -h dev.db | cut -f1))"
    
    # Effectuer la migration
    python3 migrate_sqlite_to_mariadb.py
    
    if [ $? -eq 0 ]; then
        echo "‚úì Migration termin√©e avec succ√®s!"
    else
        echo "‚úó Erreur lors de la migration"
        exit 1
    fi
}

# Fonction principale
main() {
    # V√©rifier les variables d'environnement
    if [ -z "$DATABASE_URL" ]; then
        echo "‚úó ERREUR: Variable DATABASE_URL non d√©finie"
        exit 1
    fi
    
    echo "üìä Configuration:"
    echo "  - DATABASE_URL: ${DATABASE_URL}"
    echo "  - FLASK_ENV: ${FLASK_ENV:-development}"
    echo "  - Working Directory: $(pwd)"
    
    # √âtapes de d√©marrage
    check_database
    init_tables
    
    # V√©rifier si migration n√©cessaire
    MIGRATION_STATUS=$(check_migration_needed)
    
    if echo "$MIGRATION_STATUS" | grep -q "MIGRATION_NEEDED"; then
        perform_migration
    else
        echo "‚ÑπÔ∏è  Migration non n√©cessaire - donn√©es d√©j√† pr√©sentes"
    fi
    
    # Afficher un r√©sum√© final
    echo "üìà R√©sum√© final des donn√©es:"
    python3 -c "
from app import app
from models.exts import db
from models.model import User
from models.subscription_pack_model import SubscriptionPack
from models.order_model import Order

with app.app_context():
    try:
        users = User.query.count()
        packs = SubscriptionPack.query.count()
        orders = Order.query.count()
        print(f'  - Utilisateurs: {users}')
        print(f'  - Packs: {packs}')
        print(f'  - Commandes: {orders}')
    except Exception as e:
        print(f'  - Erreur lors du r√©sum√©: {e}')
"
    
    # D√©marrer l'application Flask
    echo "üöÄ D√©marrage de l'application Flask sur le port 5001..."
    exec python3 -m flask run --host=0.0.0.0 --port=5001
}

# Gestion des signaux pour un arr√™t propre
trap 'echo "Signal re√ßu, arr√™t en cours..."; exit 0' SIGTERM SIGINT

# Ex√©cuter la fonction principale
main "$@"