#!/usr/bin/env python3
"""
Script d'initialisation et de migration automatique pour Docker Compose
Ce script :
1. Initialise la base de donn√©es MySQL
2. Migre automatiquement les donn√©es depuis SQLite (dev.db) vers MySQL
3. Ex√©cute les migrations n√©cessaires
"""

import os
import sys
import time
import sqlite3
from contextlib import closing

# Ajouter le r√©pertoire courant au path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models.exts import db as db_ext

# Import des scripts de migration existants
from migrate_sqlite_to_mariadb import main as migrate_sqlite_main
from migrate_add_created_by import migrate_add_created_by_field, verify_migration

def wait_for_mysql(max_retries=30, delay=2):
    """Attendre que MySQL soit disponible"""
    print("üîÑ Attente de la disponibilit√© de MySQL...")
    
    for attempt in range(max_retries):
        try:
            with app.app_context():
                # Tenter une connexion simple
                db.engine.execute("SELECT 1")
                print("‚úÖ MySQL est disponible!")
                return True
        except Exception as e:
            print(f"‚è≥ Tentative {attempt + 1}/{max_retries} - MySQL non disponible: {str(e)}")
            if attempt < max_retries - 1:
                time.sleep(delay)
            else:
                print("‚ùå Impossible de se connecter √† MySQL apr√®s plusieurs tentatives")
                return False
    
    return False

def initialize_database():
    """Initialiser la base de donn√©es MySQL"""
    print("üîß Initialisation de la base de donn√©es MySQL...")
    
    try:
        with app.app_context():
            # Cr√©er toutes les tables
            db.create_all()
            print("‚úÖ Tables cr√©√©es avec succ√®s!")
            return True
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {str(e)}")
        return False

def check_sqlite_exists():
    """V√©rifier si le fichier SQLite existe"""
    sqlite_path = os.path.join(os.path.dirname(__file__), 'dev.db')
    return os.path.exists(sqlite_path)

def is_database_empty():
    """V√©rifier si la base de donn√©es MySQL est vide"""
    try:
        with app.app_context():
            # V√©rifier si la table user existe et contient des donn√©es
            result = db.engine.execute("SELECT COUNT(*) FROM user")
            count = result.fetchone()[0]
            return count == 0
    except Exception:
        # Si la table n'existe pas ou autre erreur, consid√©rer comme vide
        return True

def migrate_sqlite_to_mysql():
    """Migrer les donn√©es de SQLite vers MySQL"""
    print("üì¶ Migration des donn√©es SQLite vers MySQL...")
    
    if not check_sqlite_exists():
        print("‚ö†Ô∏è  Fichier dev.db non trouv√©, migration SQLite ignor√©e")
        return True
    
    if not is_database_empty():
        print("‚ÑπÔ∏è  La base de donn√©es MySQL contient d√©j√† des donn√©es, migration SQLite ignor√©e")
        return True
    
    try:
        # Ex√©cuter la migration SQLite vers MySQL
        migrate_sqlite_main()
        print("‚úÖ Migration SQLite vers MySQL termin√©e!")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration SQLite: {str(e)}")
        return False

def run_additional_migrations():
    """Ex√©cuter les migrations suppl√©mentaires"""
    print("üîÑ Ex√©cution des migrations suppl√©mentaires...")
    
    try:
        # Migration pour ajouter le champ created_by
        if migrate_add_created_by_field():
            print("‚úÖ Migration 'created_by' termin√©e!")
            
            # V√©rifier la migration
            if verify_migration():
                print("‚úÖ V√©rification de la migration r√©ussie!")
            else:
                print("‚ö†Ô∏è  V√©rification de la migration √©chou√©e")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors des migrations suppl√©mentaires: {str(e)}")
        return False

def main():
    """Fonction principale d'initialisation et migration"""
    print("üöÄ === Initialisation et Migration Automatique ===")
    print("Ce script va :")
    print("1. Attendre que MySQL soit disponible")
    print("2. Initialiser la base de donn√©es MySQL")
    print("3. Migrer les donn√©es depuis SQLite (si disponible)")
    print("4. Ex√©cuter les migrations suppl√©mentaires")
    print()
    
    # √âtape 1: Attendre MySQL
    if not wait_for_mysql():
        print("‚ùå Impossible de continuer sans MySQL")
        sys.exit(1)
    
    # √âtape 2: Initialiser la base de donn√©es
    if not initialize_database():
        print("‚ùå √âchec de l'initialisation de la base de donn√©es")
        sys.exit(1)
    
    # √âtape 3: Migrer SQLite vers MySQL (si n√©cessaire)
    if not migrate_sqlite_to_mysql():
        print("‚ùå √âchec de la migration SQLite")
        sys.exit(1)
    
    # √âtape 4: Migrations suppl√©mentaires
    if not run_additional_migrations():
        print("‚ùå √âchec des migrations suppl√©mentaires")
        sys.exit(1)
    
    print()
    print("üéâ === Initialisation et Migration Termin√©es avec Succ√®s! ===")
    print("üìä phpMyAdmin est accessible sur: http://localhost:8080")
    print("üîó Backend API sera disponible sur: http://localhost:5001")
    print("üë§ Utilisateur MySQL: admin_tcf_canada_STZ")
    print("üîë Mot de passe MySQL: admin_tcf_canada_STZ")
    print()

if __name__ == '__main__':
    main()